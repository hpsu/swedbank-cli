#!/usr/bin/env python
import getpass
import sys
import base64
import uuid
import random
import hashlib
import json
import os

from optparse import OptionParser
if sys.version_info > (3, 0):
    from urllib.request import build_opener, HTTPCookieProcessor, Request
    from http.cookiejar import CookieJar, Cookie
    from urllib.error import HTTPError
else:
    from urllib2 import build_opener, HTTPCookieProcessor, Request, HTTPError
    from cookielib import CookieJar, Cookie

class swedbank:
    def __init__(self):
        """ Set default stuff """
        self.data = ""
        self.pch = None
        self.authkey = None
        self.cj = CookieJar()
        self.profile = None
        self.account = None
        self.banks = None
        self.banks = {"swedbank": {"id":"HithYAGrzi8fu73j", "u-a":"SwedbankMOBPrivateIOS/3.9.0_(iOS;_8.0.2)_Apple/iPhone5,2"},
                      "sparbanken": {"id":"9iZSu74jfDFaTdPd", "u-a":"SavingbankMOBPrivateIOS/3.9.0_(iOS;_8.0.2)_Apple/iPhone5,2"},
                      "swedbank_ung": {"id":"IV4Wrt2VZtyYjfpW", "u-a":"SwedbankMOBYouthIOS/1.6.0_(iOS;_8.0.2)_Apple/iPhone5,2"},
                      "sparbanken_ung": {"id":"BrGkZQR89rEbFwnj", "u-a":"SavingbankMOBYouthIOS/1.6.0_(iOS;_8.0.2)_Apple/iPhone5,2"},
                      "swedbank_foretag": {"id":"v0RVbFGKMXz7U4Eb", "u-a":"SwedbankMOBCorporateIOS/1.5.0_(iOS;_8.0.2)_Apple/iPhone5,2"},
                      "sparbanken_foretag": {"id":"JPf1VxiskNdFSclr", "u-a":"SavingbankMOBCorporateIOS/1.5.0_(iOS;_8.0.2)_Apple/iPhone5,2"}}
        self.useragent = None
        self.bankid = None

    def get_authkey(self):
        if self.authkey is None:
            data = "%s:%s" % (self.bankid, uuid.uuid4())
            self.authkey = base64.b64encode(data.encode("utf-8")).decode("utf-8")
        return self.authkey

    def get_dsid(self):
        data = "%s%s" % (random.randint(0, 99999), random.randint(0, 99999))
        hashvalue = hashlib.sha1(data.encode("utf-8")).hexdigest()[:8]
        dsid = "%s%s" % (hashvalue[:4], hashvalue[4:].upper())
        random.shuffle(list(dsid))
        return ''.join(dsid)

    def request(self, url, post=None, method="GET"):
        """ Make the request"""
        dsid = self.get_dsid()
        baseurl = "https://auth.api.swedbank.se/TDE_DAP_Portal_REST_WEB/api/v1/%s?dsid=%s" % (url, dsid)
        if self.pch is None:
            self.pch = build_opener(HTTPCookieProcessor(self.cj))
        if post:
            post = bytearray(post, "utf-8")
            request = Request(baseurl, data=post)
            request.add_header("Content-Type", "application/json")
        else:
            request = Request(baseurl)

        request.add_header("User-Agent", self.useragent)
        request.add_header("Authorization", self.get_authkey())
        request.add_header("Accept", "*/*")
        request.add_header("Accept-Language", "sv-se")
        request.add_header("Connection", "keep-alive")
        request.add_header("Proxy-Connection", "keep-alive")
        self.cj.set_cookie(Cookie(version=0, name='dsid', value=dsid, port=None, port_specified=False, domain='.api.swedbank.se', domain_specified=False, domain_initial_dot=False, path='/', path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={'HttpsOnly': None}, rfc2109=False))
        request.get_method = lambda: method
        tmp = self.pch.open(request)
        self.data = tmp.read().decode("utf8")

    def login(self, user, passwd, bank):
        """ Login """
        if bank not in self.banks:
            print("Can't find that bank.")
            return False
        self.useragent = self.banks[bank]["u-a"]
        self.bankid = self.banks[bank]["id"]
        login = json.dumps({"userId": user, "password": passwd, "useEasyLogin": False, "generateEasyLoginId": False})
        try:
            self.request("identification/personalcode", post=login, method="POST")
        except HTTPError as e:
            error = json.loads(e.read().decode("utf8"))
            print(error["errorMessages"]["fields"][0]["message"])
            return False
        try:
            self.request("profile/")
        except HTTPError as e:
            error = json.loads(e.read().decode("utf8"))
            print(error["errorMessages"]["general"][0]["message"])
            return False

        profile = json.loads(self.getdata())
        if len(profile["banks"]) == 0:
            print("Using wrong bank? Can't find any bank info.")
            return False
        try:
            self.profile = profile["banks"][0]["privateProfile"]["id"]
        except KeyError:
            self.profile = profile['banks'][0]['corporateProfiles'][0]["id"]
        try:
            self.request("profile/%s" % self.profile, method="POST")
        except HTTPError as e:
            error = json.loads(e.read().decode("utf8"))
            print(error["errorMessages"]["general"][0]["message"])
            return False

        return True

    def accounts(self):
        """ Accounts """
        try:
            self.request("engagement/overview")
        except HTTPError as e:
            error = json.loads(e.read().decode("utf8"))
            print(error["errorMessages"]["general"][0]["message"])
            return
        overview = json.loads(self.getdata())

        flatlist = [item for sublist in reversed(list(overview.values())) for item in sublist]
        nameLen = len(max([x['name'] for x in flatlist], key=len))
        balanceLen = len(max([x['balance'] for x in flatlist], key=len))

        for n in flatlist:
            if self.account is None and "id" in n:
                self.account = n["id"]
            print("%s %s" % (
                self.formatAccountName(n['name'], nameLen),
                self.formatAccountBalance(n['balance'], n['currency'], balanceLen)
            ))

    def formatAccountName(self, name, maxlen):
        if self.output_format == 'hr':
            return str(name + ':').ljust(maxlen + 1)
        else:
            return name

    def formatAccountBalance(self, balance, currency, maxlen):
        if self.output_format == 'hr':
            return str(balance + ' ' + currency).rjust(maxlen + 4)
        else:
            return str(float(balance.replace(' ', '').replace(',', '.')))


    def history(self):
        """ History """
        print("Transactions:")
        try:
            self.request("engagement/transactions/%s" % self.account)
        except HTTPError as e:
            error = json.loads(e.read().decode("utf8"))
            print(error["errorMessages"]["general"][0]["message"])
            return

        transactions = json.loads(self.getdata())["transactions"]
        for i in transactions:
            print("%s %s %s" % (i["date"], i["description"], i["amount"]))

    def listbanks(self):
        for i in sorted(self.banks.keys()):
            if i == "swedbank":
                print("%s (default)" % i)
            else:
                print(i)
    def getdata(self):
        """ Get the response data """
        return self.data

class config:
    def __init__(self):
        """ Try to determine XDG-support """
        try:
            from xdg import BaseDirectory
            self.config_path = BaseDirectory.load_first_config('swedbank-cli')
            if not self.config_path: raise ImportError
            self.config_path += '/config.json'

        except ImportError:
            self.config_path =  os.path.expanduser('~') +"/.swedbank-cli"

    def load(self):
        """ Attempt to load config file in JSON format """
        if not os.path.exists(self.config_path):
            return False

        try:
            with open(self.config_path,'r') as f:
                self._config = json.loads(f.read())
        except IOError:
            return False

        return True

    def get(self, var):
        if var in self._config:
            return self._config[var]
        return None

def main():
    """ Main """
    usage = "usage: %prog [options]"
    parser = OptionParser(usage=usage)
    parser.add_option("-u", "--username",
                      metavar="username", help="Username")
    parser.add_option("-p", "--password",
                      metavar="passwd", help="Password")
    parser.add_option("-b", "--bank",
                      metavar="bank", help="Choose which bank you want to use.\nDefault first bank", default="swedbank")
    parser.add_option("-B", "--list-banks",
                      action="store_true", dest="listbanks", default=False, help="List banks to choose from")
    parser.add_option("-t", "--transactions",
                      action="store_true", dest="transactions", help="Show all available transactions for account.")
    parser.add_option("-f", "--format",
                      choices=['hr','raw'], default='hr', help="Choose output format (raw, hr)")
    (options, args) = parser.parse_args()

    swed = swedbank()
    if options.listbanks:
        swed.listbanks()
        sys.exit(2)

    conf = config()
    if conf.load():
        for key in conf._config.keys():
            if key in vars(options):
                setattr(options, key, conf.get(key))

    if not options.username:
        print("Missing username!")
        sys.exit(1)
    else:
        username = options.username

    if options.password:
        password = options.password
    else:
        password = getpass.getpass()

    bank = options.bank
    swed.output_format = options.format

    if not password:
        print("Missing password!")
        sys.exit(1)

    if swed.login(username, password, bank):
        swed.accounts()
        if options.transactions:
            swed.history()

if __name__ == "__main__":
    main()
